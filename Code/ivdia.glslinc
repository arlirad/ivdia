/*
 * SPDX-License-Identifier: LGPL-3.0-or-later
 *
 * Copyright (c) 2025 Arlirad
 * Licensed under the GNU Lesser General Public License v3.0 or later
 * See the LICENSE file in the top-level directory for details.
 */

#pragma vertex vert
#pragma fragment frag

#include "UnityCG.cginc"
#include "UnityLightingCommon.cginc"

sampler2D _MainTex;
float4 _MainTex_ST;

float _ShadeMul;
float _ShadeDirMul;
float _ShadeDirMin;
float _ShadeMax;
float _ShadeMin;

#ifdef _IVDIA_SEETHROUGH_HAIR_ALPHA_PASS
float _SeethroughAlpha;
#endif

#ifdef _IVDIA_EMISSION
float _EmissionStrength;
#endif

#ifdef _IVDIA_HAIR_HIGHLIGHT
sampler2D _HighlightTex;
float4 _HighlightTex_ST;
float3 _HighlightColor;
float _HighlightDotUpper;
float _HighlightDotLower;
#endif

struct appdata
{
    float4 vertex : POSITION;
    float3 normal : NORMAL;
    float4 color : COLOR;
    float2 uv : TEXCOORD0;
};

struct v2f
{
    float4 vertex : SV_POSITION;
    float2 uv : TEXCOORD0;
    float3 normal : TEXCOORD1;
    float3 viewDir : TEXCOORD2;
    float4 color : COLOR0;
};

v2f vert(appdata v)
{
    v2f o;

    float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
    float3 normal   = UnityObjectToWorldNormal(v.normal);
    float3 viewDir  = normalize(UnityWorldSpaceViewDir(worldPos));

    o.vertex  = UnityObjectToClipPos(v.vertex);
    o.uv      = v.uv;
    o.color   = v.color;
    o.normal  = normal;
    o.viewDir = viewDir;

    return o;
}

fixed4 frag(v2f i) : SV_Target
{
    float3 directLight  = _LightColor0.rgb * _ShadeDirMul;
    float3 lightDir     = normalize(_WorldSpaceLightPos0);
    float  ndotl        = saturate(dot(i.normal, lightDir));
    float  shade        = saturate((ndotl - _ShadeMin) / (_ShadeMax - _ShadeMin)) * (1.00 - _ShadeDirMin) + _ShadeDirMin ;
    float3 ambientLight = ShadeSH9(float4(0.00, 0.00, 0.00, 1.00));
    float3 light        = directLight * shade + ambientLight;
    
    fixed4 tex = tex2D(_MainTex, i.uv * _MainTex_ST.xy);

    tex.a = i.color.a;

#ifdef _IVDIA_SEETHROUGH_OCULAR_OPAQUE_PASS
    if (tex.w < 0.99)
        discard;
#endif
#ifdef _IVDIA_SEETHROUGH_OCULAR_TRANSPARENT_PASS
    if (tex.w >= 0.99)
        discard;
#endif

#ifdef _IVDIA_SEETHROUGH_HAIR_ALPHA_PASS
    tex.a *= _SeethroughAlpha;
#endif

    tex.rgb *= light;

#ifdef _IVDIA_EMISSION
    tex.rgb += tex.rgb * (i.color.b * _EmissionStrength);
#endif

#ifdef _IVDIA_HAIR_HIGHLIGHT
    float  ndotv           = saturate(dot(normalize(i.normal), normalize(i.viewDir)));
    fixed3 highlightTex    = tex2D(_HighlightTex, i.uv);
    float  highlight       = highlightTex.r * ndotv;
    float  lowerUpperDelta = _HighlightDotUpper - _HighlightDotLower;

    highlight = saturate(highlight - _HighlightDotLower);
    highlight = highlight / lowerUpperDelta;

    tex.rgb += _HighlightColor * ambientLight * highlight;
#endif

    return tex;
}