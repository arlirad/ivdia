/*
 * Copyright (c) 2025 Arlirad
 * Licensed under the GNU Lesser General Public License v3.0 or later
 * See the LICENSE file in the top-level directory for details.
 */

#pragma vertex vert
#pragma fragment frag
#pragma multi_compile_fwdadd

#include "UnityCG.cginc"
#include "UnityLightingCommon.cginc"
#include "AutoLight.cginc"

float _ShadeMul;
float _ShadeMax;
float _ShadeMin;

struct v2f {
    float4 pos : SV_POSITION;
    float3 normal : TEXCOORD0;
    float3 worldPos : TEXCOORD1;
    LIGHTING_COORDS(2, 3)
};

v2f vert(appdata_full v) {
    v2f o;

    o.pos      = UnityObjectToClipPos(v.vertex);
    o.normal   = UnityObjectToWorldNormal(v.normal);
    o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;

    TRANSFER_VERTEX_TO_FRAGMENT(o);
    
    return o;
}

fixed4 frag(v2f i) : SV_Target {
    float  atten    = LIGHT_ATTENUATION(i);
    float3 lightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));
    float  ndotl    = saturate(dot(i.normal, lightDir));
    float  shade    = saturate((ndotl - _ShadeMin) / (_ShadeMax - _ShadeMin)) * _ShadeMul;

    fixed3 lightColor = _LightColor0.rgb * shade * atten;
    return fixed4(lightColor, 1.0);
}