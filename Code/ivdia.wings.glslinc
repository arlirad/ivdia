/*
 * SPDX-License-Identifier: LGPL-3.0-or-later
 *
 * Copyright (c) 2025 Arlirad
 * Licensed under the GNU Lesser General Public License v3.0 or later
 * See the LICENSE file in the top-level directory for details.
 */

#pragma vertex vert
#pragma fragment frag

#include "UnityCG.cginc"
#include "UnityLightingCommon.cginc"

float _ShadeMul;
float _ShadeDirMul;
float _ShadeDirMin;
float _ShadeMax;
float _ShadeMin;

float4 _RootColor;
float4 _EndColor;
float4 _StreakColor;
float  _StreakMul;

#ifdef _IVDIA_EMISSION
float _EmissionStrength;
#endif

struct appdata
{
    float4 vertex : POSITION;
    float3 normal : NORMAL;
    float4 color : COLOR;
    float2 uv : TEXCOORD0;
};

struct v2f
{
    float4 vertex : SV_POSITION;
    float2 uv : TEXCOORD0;
    float3 normal : TEXCOORD1;
    float3 viewDir : TEXCOORD2;
    float4 color : COLOR0;
};

v2f vert(appdata v)
{
    v2f o;

    float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
    float3 normal   = UnityObjectToWorldNormal(v.normal);
    float3 viewDir  = normalize(UnityWorldSpaceViewDir(worldPos));

    o.vertex  = UnityObjectToClipPos(v.vertex);
    o.uv      = v.uv;
    o.color   = v.color;
    o.normal  = normal;
    o.viewDir = viewDir;

    return o;
}

fixed4 frag(v2f i) : SV_Target
{
    float4 root = _RootColor;
    float4 end  = _EndColor;

    root.rgb *= _EmissionStrength;
    end.rgb *= _EmissionStrength;

    float4 color   = lerp(root, end, i.uv.y);
    float streak_x = i.uv.y - _Time;

    color.rgb += _StreakColor.rgb * (sin(frac(streak_x) * 3.1415 * 2.00 * _StreakMul) > 0.25) * _StreakColor.a;

    return color;
}